import path from 'path';
import { expect, Page } from 'playwright/test';
import { gql } from 'services/clients/graphql.client';

export async function createVenuePage(
  app: Page,
  pageName: string = `TestVenue-${Date.now()}`,
  pageBio: string = 'autogenerated test page'
): Promise<{ venueId: string; venueName: string }> {
  await app.goto('/pages');

  // Step 3: Click on "Create page" button
  await app.click('[data-testid="create-page-btn"]');

  // Step 4: Wait for the create page to load
  await app.waitForURL('/pages/create');

  // Step 5: Click on "Continue" button for Venue Page
  await app.click('[data-testid="create-venue-page-btn"]');

  // Step 6: Fill out the form
  await app.fill('[data-testid="venue-name-input"]', pageName);
  await app.fill('[data-testid="venue-bio-input"]', pageBio);
  await app.click('[data-testid="create-page-btn"]');

  // Step 7: Verify Venue page creation success
  await expect(app.locator('text=New venue created!')).toBeVisible();
  await app.waitForURL('/venue/*');

  // Step 8: Verify the page is created and successfully navigated
  await expect(app.locator(`text=${pageName}`)).toBeVisible();
  await expect(app.locator(`text=${pageBio}`)).toBeVisible();

  // Extract the venueId from the URL
  const urlParts = app.url().split('/');
  const venueId = urlParts.pop() || '';
  return { venueId, venueName: pageName };
}

export async function deleteVenuePage(
  venueId: string,
  userId: string
): Promise<void> {
  if (!venueId) {
    console.warn('No venueId found, skipping deletion');
    return;
  }

  const deleteMutation = `
      mutation MyMutation($venueId: String!, $userId: String!) {
        deleteVirtuosoVenues(input: { VenueID: $venueId, userId: $userId }) {
          VenueID
        }
      }
    `;

  const variables = { venueId, userId };
  const response = await gql(deleteMutation, variables);
  console.log('Deletion response:', response);

  // If the response includes GraphQL errors, fail the test by throwing
  if (response.errors && response.errors.length > 0) {
    throw new Error(
      `GraphQL deletion error(s): ${JSON.stringify(response.errors)}`
    );
  }

  if (!response.data.deleteVirtuosoVenues) {
    throw new Error('deleteVirtuosoVenues returned null or undefined');
  }
}

export async function uploadVenuePak(
  app: Page,
  venueId: string
): Promise<void> {
  await app.goto(`/venue/create/${venueId}`);

  await expect(app.locator('[data-testid="edit-venue-form"]')).toBeVisible();

  await app.click('[data-testid="add-stage-btn"]');
  await app.click('[data-testid="add-stage-btn"]');
  const stageInputs = app.locator('[data-testid="stage-name-input"]');
  await stageInputs.first().fill('stage 1');
  await stageInputs.last().fill('stage 2');

  const umapNameInput = app.locator('[data-testid="umap-name-input"]');
  await umapNameInput.fill('MyUMAPVenue');

  const priceInput = app.locator('[data-testid="venue-price-input"]');
  await priceInput.fill('100');

  await app.click('[data-testid="add-another-os-btn"]');
  const osSelects = app.locator('[data-testid="os-select"]');
  await osSelects.last().selectOption('windows');

  const testPakPath = path.resolve(__dirname, 'test.pak');
  const osFileInputs = app.locator('[data-testid="os-file-input"]');
  const [presignedPakRequest] = await Promise.all([
    app.waitForRequest(
      (req) =>
        req.url().includes('/api/upload/get-presigned-pak-url') &&
        req.method() === 'POST'
    ),
    osFileInputs.last().setInputFiles(testPakPath),
  ]);
  console.log('Presigned pak URL request made:', presignedPakRequest.url());

  await Promise.all([
    app.waitForResponse(
      (res) =>
        res.request().url().includes('amazonaws.com') &&
        res.request().method() === 'PUT' &&
        res.status() === 200
    ),
  ]);

  await expect(
    app.locator('[data-testid="os-upload-row"] [data-testid="os-upload-state"]')
  ).toContainText('UPLOADED', { timeout: 8000 });

  const venueImageFileInput = app.locator(
    '[data-testid="venue-image-file-input"]'
  );
  const testImagePath = path.resolve(__dirname, 'test.png');
  const [presignedRequest] = await Promise.all([
    app.waitForRequest(
      (req) =>
        req.url().includes('/api/upload/get-presigned-url') &&
        req.method() === 'POST'
    ),
    venueImageFileInput.setInputFiles(testImagePath),
  ]);
  console.log('Presigned URL request made:', presignedRequest.url());

  await Promise.all([
    app.waitForResponse(
      (res) =>
        res.request().url().includes('amazonaws.com') &&
        res.request().method() === 'PUT' &&
        res.status() === 200
    ),
  ]);

  await expect(app.locator('[data-testid="venue-image-preview"]')).toHaveCount(
    1
  );

  await app.click('[data-testid="update-venue-btn"]');
  await expect(app.locator('text=Venue updated!')).toBeVisible();
  await expect(
    app.locator('[data-testid="update-venue-success-msg"]')
  ).toBeVisible();
}

export async function uploadSitemap(
  app: Page,
  venueId: string,
  venueName?: string
): Promise<{ sitemapId: string; sitemapName: string }> {
  // 1. Navigate to your sitemap creation page (adjust the URL to your actual route)
  await app.goto(`/sitemap/upload/${venueId}`);

  // 2. Wait for the sitemap form
  await expect(
    app.locator('[data-testid="upload-sitemap-form"]')
  ).toBeVisible();

  const sitemapName = `Sitemap-${Date.now()}`;
  const sitemapDesc = 'autogenerated sitemap for testing';

  // 3. Fill in fields
  await app.locator('[data-testid="sitemap-name-input"]').fill(sitemapName);
  await app
    .locator('[data-testid="sitemap-description-input"]')
    .fill(sitemapDesc);
  await app
    .locator('[data-testid="sitemap-umap-name-input"]')
    .fill('MyUMAPName');
  await app.locator('[data-testid="sitemap-price-input"]').fill('42');

  // 4. Upload an image
  const testImagePath = path.resolve(__dirname, 'test.png');
  const imageFileInput = app.locator(
    '[data-testid="sitemap-image-file-input"]'
  );

  const [presignedImageRequest] = await Promise.all([
    app.waitForRequest(
      (req) =>
        req.url().includes('/api/upload/get-presigned-url') &&
        req.method() === 'POST'
    ),
    imageFileInput.setInputFiles(testImagePath),
  ]);

  await Promise.all([
    app.waitForResponse(
      (res) =>
        res.request().url().includes('amazonaws.com') &&
        res.request().method() === 'PUT' &&
        res.status() === 200
    ),
  ]);

  console.log('Presigned URL request made:', presignedImageRequest.url());

  // 5. Use the "ChooseOS" flow to add an OS. For example, click the "add another" button if needed:
  await app.locator('[data-testid="add-another-os-btn"]').click();
  const osSelects = app.locator('[data-testid="os-select"]');
  await osSelects.last().selectOption('windows');

  // Provide a .pak path
  const testPakPath = path.resolve(__dirname, 'test.pak');
  const osFileInputs = app.locator('[data-testid="os-file-input"]');

  await Promise.all([
    app.waitForRequest(
      (req) =>
        req.url().includes('/api/upload/get-presigned-pak-url') &&
        req.method() === 'POST'
    ),
    osFileInputs.last().setInputFiles(testPakPath),
  ]);

  await Promise.all([
    app.waitForResponse(
      (res) =>
        res.request().url().includes('amazonaws.com') &&
        res.request().method() === 'PUT' &&
        res.status() === 200
    ),
  ]);

  await expect(
    app.locator('[data-testid="os-upload-row"] [data-testid="os-upload-state"]')
  ).toContainText('UPLOADED', { timeout: 8000 });

  // 6. Click the upload button
  await app.click('[data-testid="upload-sitemap-btn"]');

  // 7. Expect success
  await expect(app.locator('text=Sitemap uploaded!')).toBeVisible();

  await app.waitForURL('/sitemap/*');

  // Step 8: Verify the page is created and successfully navigated
  await expect(app.locator(`text=${sitemapName}`)).toBeVisible();
  await expect(app.locator(`text=${sitemapDesc}`)).toBeVisible();

  if (venueName) {
    console.log({ venueName });
    await expect(
      app.locator('[data-testid="venue-profile-link"]')
    ).toContainText(venueName);
  }

  // Extract the sitemapId from the URL
  const urlParts = app.url().split('/');
  const sitemapId = urlParts.pop() || '';

  return { sitemapId, sitemapName };
}

export async function deleteSitemap(
  sitemapId: string,
  userId: string
): Promise<void> {
  if (!sitemapId) {
    console.warn('No sitemapId found, skipping deletion');
    return;
  }

  const deleteMutation = `
      mutation MyMutation($sitemapId: String!, $userId: String!) {
        deletedSitemap: deleteVirtuosoSiteMaps(input: { SiteMapID: $sitemapId, userId: $userId }) {
          SiteMapID
        }
      }
    `;

  const variables = { sitemapId, userId };
  const response = await gql(deleteMutation, variables);
  console.log('Deletion response:', response);

  // If the response includes GraphQL errors, fail the test by throwing
  if (response.errors && response.errors.length > 0) {
    throw new Error(
      `GraphQL deletion error(s): ${JSON.stringify(response.errors)}`
    );
  }

  if (!response.data.deletedSitemap) {
    throw new Error('deletedSitemap returned null or undefined');
  }
}
