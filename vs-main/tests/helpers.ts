import { expect, Page } from '@playwright/test';
import { gql } from 'services/clients/graphql.client';

export async function editProfile(
  app: Page,
  newName: string,
  newBio: string
): Promise<void> {
  // Test EditProfile
  await app.click('[data-testid="edit-profile-btn"]');

  // Check if the modal is visible
  await expect(app.locator('[data-testid="edit-profile-modal"]')).toBeVisible();

  // Fill out the Update form
  await app.fill('[data-testid="edit-profile-name"]', newName);
  await app.fill('[data-testid="edit-profile-bio"]', newBio);

  app.click('[data-testid="edit-profile-save-btn"]'),
    // Verify the update success
    await expect(
      app.locator('[data-testid="edit-profile-modal"]')
    ).not.toBeVisible();
  // await expect(app.locator(`text=${newName}`)).toBeVisible();
}

export async function createCreatorPage(
  app: Page,
  pageName: string = `TestCreator-${Date.now()}`,
  pageBio: string = 'autogenerated test page'
): Promise<string> {
  // Step 2: Navigate to pages
  await app.goto('/pages');
  await awaitSession(app);

  // Step 3: Click on "Create page" button
  await app.click('[data-testid="create-page-btn"]');

  // Step 4: Wait for the create page to load
  await app.waitForURL('/pages/create');

  // Step 5: Click on "Continue" button for Creator Page
  await app.click('[data-testid="create-creator-page-btn"]');

  // Step 6: Fill out the form
  await app.fill('[data-testid="creator-name-input"]', pageName);
  await app.fill('[data-testid="creator-bio-input"]', pageBio);
  await app.click('[data-testid="create-page-btn"]');

  // Step 7: Verify Creator page creation success
  await expect(app.locator('text=New page created!')).toBeVisible();
  await app.waitForURL('/creator/*');

  // Step 8: Verify the page is created and successfully navigated
  await expect(app.locator('[data-testid="profile-name"]')).toHaveText(
    pageName
  );
  await expect(app.locator('[data-testid="profile-bio"]')).toHaveText(pageBio);

  // Extract the creatorId from the URL
  const urlParts = app.url().split('/');
  const creatorId = urlParts.pop() || '';
  return creatorId;
}

export async function deleteCreatorPage(creatorId: string): Promise<void> {
  if (!creatorId) {
    console.warn('No creatorId found, skipping deletion');
    return;
  }

  const deleteMutation = `
        mutation MyMutation($creatorId: String!) {
          deleteVirtuosoCreators(input: { CreatorID: $creatorId }) {
            CreatorID
          }
        }
      `;

  const variables = { creatorId };
  const response = await gql(deleteMutation, variables);
  console.log('Deletion response:', response);

  // If the response includes GraphQL errors, fail the test by throwing
  if (response.errors && response.errors.length > 0) {
    throw new Error(
      `GraphQL deletion error(s): ${JSON.stringify(response.errors)}`
    );
  }

  if (!response.data.deleteVirtuosoCreators) {
    throw new Error('deleteVirtuosoCreators returned null or undefined');
  }
}

export async function awaitSession(app: Page): Promise<void> {
  await app.waitForResponse(
    (response) =>
      response.url().includes('/session') && response.status() === 200,
    { timeout: 5000 }
  );
}
