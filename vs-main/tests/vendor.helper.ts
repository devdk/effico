import path from 'path';
import { expect, Page } from 'playwright/test';
import { gql } from 'services/clients/graphql.client';

export async function createVendorPage(
  app: Page,
  pageName: string = `TestVendor-${Date.now()}`,
  pageBio: string = 'autogenerated test page'
): Promise<{ vendorId: string; vendorName: string }> {
  await app.goto('/pages');

  // Step 3: Click on "Create page" button
  await app.click('[data-testid="create-page-btn"]');

  // Step 4: Wait for the create page to load
  await app.waitForURL('/pages/create');

  // Step 5: Click on "Continue" button for Venue Page
  await app.click('[data-testid="create-vendor-page-btn"]');

  // Step 6: Fill out the form
  await app.fill('[data-testid="vendor-name-input"]', pageName);
  await app.fill('[data-testid="vendor-bio-input"]', pageBio);
  await app.click('[data-testid="create-page-btn"]');

  // Step 7: Verify Vendor page creation success
  await expect(app.locator('text=New vendor created!')).toBeVisible();
  await app.waitForURL('/vendor/*');

  // Step 8: Verify the page is created and successfully navigated
  await expect(app.locator(`text=${pageName}`)).toBeVisible();

  // Extract the vendorId from the URL
  const urlParts = app.url().split('/');
  const vendorId = urlParts.pop() || '';
  return { vendorId, vendorName: pageName };
}

export async function deleteVendorPage(vendorId: string): Promise<void> {
  if (!vendorId) {
    console.warn('No vendorId found, skipping deletion');
    return;
  }

  const deleteMutation = `
      mutation MyMutation($vendorId: String!) {
        deleteVirtuosoVendors(input: { VendorID: $vendorId }) {
          VendorID
        }
      }
    `;

  const variables = { vendorId };
  const response = await gql(deleteMutation, variables);
  console.log('Deletion response:', response);

  // If the response includes GraphQL errors, fail the test by throwing
  if (response.errors && response.errors.length > 0) {
    throw new Error(
      `GraphQL deletion error(s): ${JSON.stringify(response.errors)}`
    );
  }

  if (!response.data.deleteVirtuosoVendors) {
    throw new Error('deleteVirtuosoVendors returned null or undefined');
  }
}

export async function deleteProduct(id: string, userId: string): Promise<void> {
  if (!id) {
    console.warn('No user asset found, skipping deletion');
    return;
  }

  const deleteMutation = `
    mutation MyMutation ($id: String!, $userId: String!) {
        deleteUserAsset(input: {id: $id, userId: $userId}) {
                id
                productName
            }
        }
      `;

  const variables = { id, userId };
  const response = await gql(deleteMutation, variables);
  console.log('Deletion response:', response);

  // If the response includes GraphQL errors, fail the test by throwing
  if (response.errors && response.errors.length > 0) {
    throw new Error(
      `GraphQL deletion error(s): ${JSON.stringify(response.errors)}`
    );
  }

  if (!response.data.deleteUserAsset) {
    console.log(response?.errors);
    throw new Error('deleteUserAsset returned null or undefined');
  }
}

export async function createProduct(
  app: Page,
  vendorId: string
): Promise<{ productId: string; productName: string }> {
  await app.goto(`/vendor/create/${vendorId}`);

  const productName = `TestProduct-${Date.now()}`;
  const productDescription = 'This is a test product description.';
  // Step 5: Fill out the product form
  await app.fill('[data-testid="product-name-input"]', productName);
  await app.fill('[data-testid="product-price-input"]', '25');
  await app.click('[data-testid="product-asset-type-select"]');
  const option = app.getByRole('option', { name: 'Stage' });
  await option.click();

  await app.fill(
    '[data-testid="product-description-textarea"]',
    productDescription
  );

  // The UMAP name input becomes visible after selecting asset type
  await app.fill('[data-testid="product-umap-name-input"]', 'TestUMAPName');

  // Step 6: Submit the form
  await app.click('[data-testid="product-confirm-next-button"]');

  await app.waitForURL('/product/*');
  await expect(app.locator(`text=${productName}`)).toBeVisible();
  await expect(app.locator(`text=${productDescription}`)).toBeVisible();

  // Extract the sitemapId from the URL
  const urlParts = app.url().split('/');
  const productId = urlParts.pop() || '';

  return { productId, productName };
}
